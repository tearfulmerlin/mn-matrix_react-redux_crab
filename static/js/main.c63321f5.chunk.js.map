{"version":3,"sources":["functions/generators/cell-generator.js","functions/generators/table-generator.js","functions/generators/row-generator.js","functions/calculators/calc-nearest.js","Strore/store.js","Components/Spinner.js","Components/TableHead.js","functions/calculators/calc-average.js","Components/TableFooter.js","functions/calculators/calc-sum.js","Components/TableCell.js","Components/TableRow.js","Components/TableBody.js","Components/MatrixTable.js","Components/StartingForm.js","App.js","index.js"],"names":["cellGenerator","value","Math","trunc","random","uuid","uuidv1","tableGenerator","rowCount","columnCount","nums","i","push","j","rowGenerator","row","calcNearestNums","nearestCount","currentCell","map","cell","nearest","nearestValues","diff","abs","flat","sort","a","b","filter","length","indexOf","store","createStore","state","action","type","loading","loaded","tableVars","rowIndex","percentageRow","nearestCells","startLoading","finishLoading","Spinner","className","connect","cellIndex","key","calcAverage","sum","calcSum","reduce","dispatch","increase","Actions","decrease","setNearestCells","rowSum","percentageValue","round","onClick","onContextMenu","event","preventDefault","onMouseOver","onMouseLeave","style","height","removeRow","setPercentageRow","undefined","addRow","Fragment","MatrixTable","generateTable","useState","formState","setFormState","onSubmit","setTimeout","min","max","placeholder","onChange","target","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c63321f5.chunk.js","sourcesContent":["import uuidv1 from 'uuid/v1';\n\nconst cellGenerator = () => {\n  let value;\n\n  do {\n    value = Math.trunc(Math.random()*1000);\n  } while (value < 100);\n\n  return {\n    uuid: uuidv1(),\n    value,\n  };\n};\n\nexport default cellGenerator;\n","import cellGenerator from './cell-generator';\n\nconst tableGenerator = ({ rowCount, columnCount }) => {\n  const nums = [];\n\n  for (let i = 0; i < rowCount; i++) {\n    nums.push([]);\n    for (let j = 0; j < columnCount; j++)\n      nums[i].push(cellGenerator());\n  }\n\n  return nums;\n};\n\nexport default tableGenerator;\n","import cellGenerator from './cell-generator';\n\nconst rowGenerator = columnCount => {\n  const row = [];\n\n  for (let i = 0; i < columnCount; i++) {\n    row.push(cellGenerator());\n  }\n\n  return row;\n};\n\nexport default rowGenerator;\n","const calcNearestNums = (nums, nearestCount, currentCell) => {\n  if (currentCell === null) {\n    return nums\n      .map(row => row\n        .map(cell => cell.nearest === true\n          ? { ...cell, nearest: false }\n          : cell\n        )\n      );\n  }\n\n  // console.log(\n  //   nums\n  // );\n  // console.log(\n  //   currentCell\n  // );\n  // console.log(\n  //   nearestCount\n  // );\n\n  const nearestValues = nums\n    .map(row => row\n      .map(cell => ({\n        ...cell,\n        diff: Math.abs(cell.value - currentCell.value),\n      }))\n    )\n    .flat()\n    .sort((a, b) => a.diff - b.diff)\n    .filter(cell => cell.uuid !== currentCell.uuid)\n    .map(cell => cell.value)\n\n    nearestValues.length = nearestCount;\n\n  return nums\n    .map(row => row\n      .map(cell => nearestValues.indexOf(cell.value) >= 0\n        ? { ...cell, nearest: true }\n        : cell\n      )\n    );\n};\n\nexport default calcNearestNums;\n","import { createStore } from 'redux';\n\nimport tableGenerator from '../functions/generators/table-generator';\nimport rowGenerator from '../functions/generators/row-generator';\nimport calcNearestNums from '../functions/calculators/calc-nearest';\n\nconst LOADING = 'LOADING';\nconst LOADED = 'LOADED';\n\nconst GENERATE_TABLE = 'GENERATE_TABLE';\nconst ADD_ROW = 'ADD_ROW';\nconst REMOVE_ROW = 'REMOVE_ROW';\nconst INCREASE = 'INCREASE';\nconst DECREASE = 'DECREASE';\nconst SET_PERCENTAGE_ROW = 'SET_PERCENTAGE_ROW';\nconst SET_NEAREST_CELLS = 'SET_NEAREST_CELLS';\n\nexport const loading = () => ({ type: LOADING });\nexport const loaded = () => ({ type: LOADED });\n\nexport const generateTable = tableVars => ({ type: GENERATE_TABLE, tableVars });\nexport const addRow = () => ({ type: ADD_ROW });\nexport const removeRow = rowIndex => ({ type: REMOVE_ROW, rowIndex });\nexport const increase = uuid => ({ type: INCREASE, uuid });\nexport const decrease = uuid => ({ type: DECREASE, uuid });\nexport const setPercentageRow = rowIndex => ({ type: SET_PERCENTAGE_ROW, rowIndex });\nexport const setNearestCells = cell => ({ type: SET_NEAREST_CELLS, cell });\n\nconst initialState = {\n  rowCount: null,\n  columnCount: null,\n  nearestCount: null,\n  nearestCells: [],\n  nums: [],\n  startLoading: false,\n  finishLoading: false,\n  percentageRow: null,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n  case LOADING:\n    return {\n      ...state,\n      loading: true,\n      loaded: false,\n    };\n\n  case LOADED:\n    return {\n      ...state,\n      loading: false,\n      loaded: true,\n    };\n\n  case GENERATE_TABLE:\n    return {\n      ...state,\n      nearestCount: action.tableVars.nearestCount,\n      rowCount: action.tableVars.rowCount,\n      columnCount: action.tableVars.columnCount,\n      nums: tableGenerator(action.tableVars),\n    };\n\n  case ADD_ROW:\n    return {\n      ...state,\n      nums: [...state.nums, rowGenerator(state.columnCount)],\n    };\n\n  case REMOVE_ROW:\n    return {\n      ...state,\n      nums: state.nums\n        .filter((row, rowIndex) => rowIndex !== action.rowIndex),\n    };\n\n  case INCREASE:\n    return {\n      ...state,\n      nums: state.nums\n        .map(row => row.map(cell => cell.uuid !== action.uuid\n          ? cell\n          : { ...cell, value: cell.value + 1 }\n        )),\n    };\n\n  case DECREASE:\n    return {\n      ...state,\n      nums: state.nums\n        .map(row => row.map(cell => cell.uuid !== action.uuid\n          ? cell\n          : { ...cell, value: cell.value - 1 }\n        )),\n    };\n\n  case SET_PERCENTAGE_ROW:\n    return {\n      ...state,\n      percentageRow: action.rowIndex,\n    };\n\n  case SET_NEAREST_CELLS:\n    return {\n      ...state,\n      nums: calcNearestNums(state.nums, state.nearestCount, action.cell),\n    };\n\n  default:\n    return state;\n  }\n};\n\nconst store = createStore(reducer, initialState);\n\nexport default store;\n","import React from 'react';\nimport '../Styles/Spinner.css';\n\nconst Spinner = () => (\n  <>\n    <div className=\"scaling-squares-spinner\">\n      <div className=\"square\"></div>\n      <div className=\"square\"></div>\n      <div className=\"square\"></div>\n      <div className=\"square\"></div>\n    </div>\n    <p className=\"spinner-header\">Table construction is in progress...</p>\n  </>\n);\n\nexport default Spinner;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst TableHead = ({ nums }) => (\n  <thead>\n    <tr>\n      <th>Row</th>\n      {nums[0].map((cell, cellIndex) => (\n        <th key={cellIndex} >Column {cellIndex + 1}</th>\n      ))}\n      <th>Sum</th>\n    </tr>\n  </thead>\n);\n\nconst mapStateToProps = state => ({\n  nums: state.nums,\n});\n\nexport default connect(mapStateToProps, null)(TableHead);\n\nTableHead.propTypes = {\n  nums: PropTypes.arrayOf(\n    PropTypes.arrayOf(PropTypes.object)\n  ).isRequired,\n};\n","const calcAverage = (nums, cellIndex) => {\n  let sum = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i][cellIndex]['value'];\n  }\n\n  return Math.trunc(sum / nums.length);\n};\n\nexport default calcAverage;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport calcAverage from '../functions/calculators/calc-average';\n\nconst TableFooter = ({ nums }) => (\n  <tfoot>\n    <tr>\n      <td>Average</td>\n      {nums[0].map((cell, cellIndex) => (\n        <td key={cellIndex}>{calcAverage(nums, cellIndex)}</td>\n      ))}\n      <td></td>\n    </tr>\n  </tfoot>\n);\n\nconst mapStateToProps = state => ({\n  nums: state.nums,\n});\n\nexport default connect(mapStateToProps, null)(TableFooter);\n\nTableFooter.propTypes = {\n  nums: PropTypes.arrayOf(\n    PropTypes.arrayOf(PropTypes.object)\n  ).isRequired,\n};\n","const calcSum = row => row.reduce((a, {value}) => a.value + value || a + value);\n\nexport default calcSum;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Actions from '../Strore/store';\n\nconst TableCell = ({ cell, increase, decrease, setNearestCells, rowSum }) => {\n  const percentageValue = Math.round(cell.value / rowSum * 10000) / 100;\n\n  return (\n    <td\n      className={`table__cell ${cell.nearest ? 'nearest': ''} `}\n      onClick={() => increase(cell.uuid)}\n      onContextMenu={(event) => {\n        event.preventDefault();\n        decrease(cell.uuid);\n      }}\n\n    >\n      <div\n        className=\"table__cell-container\"\n        onMouseOver={() => setNearestCells(cell)}\n        onMouseLeave={() => setNearestCells(null)}\n      >\n        <span className=\"table__cell-absolut\">\n          {cell.value}\n        </span>\n\n        <div className=\"table__cell-percentage\" >\n          <div className=\"chart\" style={{ height: `${percentageValue}%` }} />\n          {`${percentageValue}%`}\n        </div>\n\n      </div>\n    </td>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  increase: uuid => dispatch(Actions.increase(uuid)),\n  decrease: uuid => dispatch(Actions.decrease(uuid)),\n  setNearestCells: cell => dispatch(Actions.setNearestCells(cell)),\n});\n\nexport default connect(null, mapDispatchToProps)(TableCell);\n\nTableCell.propTypes = {\n  cell: PropTypes.shape({\n    value: PropTypes.number.isRequired,\n    uuid: PropTypes.string.isRequired,\n  }).isRequired,\n  increase: PropTypes.func.isRequired,\n  decrease: PropTypes.func.isRequired,\n  rowSum: PropTypes.number.isRequired,\n  setNearestCells: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Actions from '../Strore/store';\nimport calcSum from '../functions/calculators/calc-sum';\nimport TableCell from './TableCell';\n\nconst TableRow = ({\n  row,\n  rowIndex,\n  removeRow,\n  percentageRow,\n  setPercentageRow\n}) => {\n  const rowSum = calcSum(row);\n\n  return (\n    <tr className={\n      rowIndex === percentageRow\n        ? 'table__row--show-percentage'\n      : undefined\n    }>\n      <td className=\"table__row-name\" onClick={() => removeRow(rowIndex)}>\n        <span className=\"table__row-title\">Row {rowIndex + 1}</span>\n        <span className=\"table__row-action\">Remove row</span>\n      </td>\n      {row.map(cell => (\n        <TableCell\n          cell={cell}\n          rowSum={rowSum}\n          key={cell.uuid}\n        />\n      ))}\n      <td\n        onMouseOver={() => setPercentageRow(rowIndex)}\n        onMouseLeave={() => setPercentageRow(null)}\n      >\n        {rowSum}\n      </td>\n    </tr>\n  );\n};\n\nconst mapStateToProps = state => ({\n  percentageRow: state.percentageRow,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  removeRow: rowIndex => dispatch(Actions.removeRow(rowIndex)),\n  setPercentageRow: rowIndex => dispatch(Actions.setPercentageRow(rowIndex)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableRow);\n\nTableRow.propTypes = {\n  row: PropTypes.arrayOf(PropTypes.object).isRequired,\n  rowIndex: PropTypes.number.isRequired,\n  removeRow: PropTypes.func.isRequired,\n  percentageRow: PropTypes.number,\n  setPercentageRow: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Actions from '../Strore/store';\nimport TableRow from './TableRow';\n\nconst TableBody = ({ nums, addRow }) => (\n  <tbody>\n    {nums.map((row, rowIndex) => (\n      <React.Fragment key={rowIndex}>\n        <TableRow row={row} rowIndex={rowIndex} />\n      </React.Fragment>\n    ))}\n    <tr>\n      <td className=\"table__add-row\">\n        <button\n          type=\"button\"\n          className=\"table__add-btn\"\n          onClick={addRow}\n        >\n          Add row\n        </button>\n      </td>\n    </tr>\n  </tbody>\n);\n\n\nconst mapStateToProps = state => ({\n  nums: state.nums,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addRow: () => dispatch(Actions.addRow()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableBody);\n\nTableBody.propTypes = {\n  nums: PropTypes.arrayOf(\n    PropTypes.arrayOf(PropTypes.object)\n  ).isRequired,\n  addRow: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport TableHead from './TableHead';\nimport TableFooter from './TableFooter';\nimport TableBody from './TableBody';\n\nconst MatrixTable = () => (\n  <div className=\"table-container\">\n    <div className=\"table-wrapper\">\n      <table className=\"table\">\n        <TableHead />\n        <TableFooter />\n        <TableBody />\n      </table>\n    </div>\n  </div>\n);\n\nexport default MatrixTable;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Actions from '../Strore/store';\n\nconst StartingForm = ({ generateTable, loading, loaded }) => {\n  const formInitialState = { rowCount: 5, columnCount: 3, nearestCount: 1 };\n  const [formState, setFormState] = useState(formInitialState);\n\n  const setRowCount = ({ target }) => {\n    setFormState(prevState => ({\n      ...prevState,\n      rowCount: target.value,\n    }));\n  };\n\n  const setColumnCount = ({ target }) => {\n    setFormState(prevState => ({\n      ...prevState,\n      columnCount: target.value,\n    }));\n  };\n\n  const setNearestCount = ({ target }) => {\n    setFormState(prevState => ({\n      ...prevState,\n      nearestCount: target.value,\n    }));\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    if (formState.rowCount && formState.columnCount && formState.nearestCount) {\n      loading();\n      generateTable(formState);\n      setTimeout(loaded, 1000);\n    }\n  };\n\n  return (\n    <form\n      onSubmit={submitHandler}\n      className=\"starting-form\"\n    >\n      <h2>Set number of table <br /> rows and columns</h2>\n      <label className=\"starting-form__label\">\n        Rows\n        <input\n          type=\"number\"\n          min=\"1\"\n          max=\"10\"\n          placeholder=\"Rows\"\n          value={formState.rowCount}\n          onChange={setRowCount}\n        />\n      </label>\n\n      <label className=\"starting-form__label\">\n        Columns\n        <input\n          type=\"number\"\n          min=\"1\"\n          max=\"5\"\n          placeholder=\"Columns\"\n          value={formState.columnCount}\n          onChange={setColumnCount}\n        />\n      </label>\n\n      <label className=\"starting-form__label\">\n        Highlighted cells\n        <input\n          type=\"number\"\n          min=\"1\"\n          max=\"5\"\n          placeholder=\"Highlighted cells\"\n          value={formState.nearestCount}\n          onChange={setNearestCount}\n        />\n      </label>\n\n      <button type=\"submit\">Generate table</button>\n    </form>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  generateTable: tableVars => dispatch(Actions.generateTable(tableVars)),\n  loading: () => dispatch(Actions.loading()),\n  loaded: () => dispatch(Actions.loaded()),\n});\n\nexport default connect(null, mapDispatchToProps)(StartingForm);\n\nStartingForm.propTypes = {\n  generateTable: PropTypes.func.isRequired,\n  loading: PropTypes.func.isRequired,\n  loaded: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Styles/App.scss';\nimport Spinner from './Components/Spinner';\nimport MatrixTable from './Components/MatrixTable';\nimport StartingForm from './Components/StartingForm';\n\nconst App = ({ nums , loading, loaded }) => (\n  <div className=\"App\">\n    <h1>MN Matrix</h1>\n    {!loading && nums.length === 0 && <StartingForm />}\n    {loading && <Spinner />}\n    {loaded && nums.length > 0 && <MatrixTable />}\n  </div>\n);\n\nconst mapStateToPrors = state => ({\n  nums: state.nums,\n  loading: state.loading,\n  loaded: state.loaded,\n});\n\nexport default connect(mapStateToPrors, null)(App);\n\nApp.propTypes = {\n  nums: PropTypes.arrayOf(\n    PropTypes.arrayOf(PropTypes.object)\n  ).isRequired,\n  loading: PropTypes.bool,\n  loaded: PropTypes.bool,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport store from './Strore/store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}